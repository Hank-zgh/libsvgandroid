#!/bin/bash

PROJECT_NAME=libsvgandroid
PROJECT_NAMESPACE=com.toolkits.libsvgandroid

LIBJPEG_CHK="3a753ea48d917945dd54a2d97de388aa06ca2eb1066cbfdc6652036349fe05a7"
LIBJPEG_SRC="jpegsrc.v9a.tar.gz"
LIBJPEG_DIR="jpeg-9a"
ZLIB_CHK="c3e5e9fdd5004dcb542feda5ee4f0ff0744628baf8ed2dd5d66f8ca1197cb1a1"
ZLIB_SRC="zlib-1.2.11.tar.gz"
ZLIB_DIR="zlib-1.2.11"
LIBPNG_CHK="574623a4901a9969080ab4a2df9437026c8a87150dfd5c235e28c94b212964a7"
LIBPNG_SRC="libpng-1.6.34.tar.gz"
LIBPNG_DIR="libpng-1.6.34"
LIBEXPAT_CHK="823705472f816df21c8f6aa026dd162b280806838bb55b3432b0fb1fcca7eb86"
LIBEXPAT_SRC="expat-2.1.0.tar.gz"
LIBEXPAT_DIR="expat-2.1.0"


function usage {
    echo
    echo "Configure script for $PROJECT_NAME"
    echo
    echo "usage:"
    echo
    echo "$0 -h"
    echo "         : prints this help text"
    echo "$0 --help"
    echo "         : prints this help text"
    echo "$0 --ndk-path <path to NDK> --sdk-path <path to SDK> --target-platform <android target platform> [--bootstrap]"
    echo "         : create a Makefile, --bootstrap will automatically download and compile prerequisite libraries"
    echo
    echo
}

function run_checksum {
    echo $1 | sha256sum -c
    if [ $? -ne 0 ]; then
	echo Checksum failed. Abort.
	exit 1
    fi
    echo Checksum was confirmed.
}

function do_fail {
    echo
    echo "Failed to build $1."
    echo "Abort."
    echo
    exit 1
}

function do_compile {
    ./configure --enable-shared=no --prefix=$TARGET_DIR --host=arm-linux
    if [ $? -ne 0 ]; then
	do_fail $1
    fi
    make
    if [ $? -ne 0 ]; then
	do_fail $1
    fi
    make install
    if [ $? -ne 0 ]; then
	do_fail $1
    fi
}

function do_libjpeg {
    tar -xf $LIBJPEG_SRC
    pushd $LIBJPEG_DIR
    do_compile libjpeg
    popd
}

function do_zlib {
    tar -xf $ZLIB_SRC
    pushd $ZLIB_DIR
    ./configure --static --prefix=$TARGET_DIR
    if [ $? -ne 0 ]; then
	fail zlib
    fi
    make
    if [ $? -ne 0 ]; then
	fail zlib
    fi
    make install
    if [ $? -ne 0 ]; then
	fail zlib
    fi
    popd
}

function do_libpng {
    tar -xf $LIBPNG_SRC
    pushd $LIBPNG_DIR
    do_compile libpng
    popd
}

function do_expat {
    tar -xf $LIBEXPAT_SRC
    pushd $LIBEXPAT_DIR
    do_compile expat
    popd
}

function findsmallest {
    local REQUESTED=`echo $TARGET_PLATFORM | cut -d '-' -f 2-`
    local LIST=`ls $NDK_PATH/platforms/ | cut -d '-' -f 2- | sort`
    local RESULT=0

    for PLF in $LIST ; do
	if [ $PLF -lt $REQUESTED ]; then
	    local RESULT=$PLF
	fi
    done

    echo "android-$RESULT"
}

function prepare_toolchain {
    mkdir -p prereqs
    pushd prereqs

    $NDK_PATH/build/tools/make-standalone-toolchain.sh --platform=$NDK_PLATFORM --toolchain=arm-linux-androideabi-4.9 --install-dir=$PWD/standalone-toolchain-4.9

    popd
}

function do_bootstrap {
    rm -rf prereqs

    prepare_toolchain

    pushd prereqs

    export PATH=$PWD/standalone-toolchain-4.9/bin:$PATH
    export CC=arm-linux-androideabi-gcc
    export CXX=arm-linux-androideabi-g++
    export TARGET_DIR=$PWD

    wget http://www.ijg.org/files/$LIBJPEG_SRC
    run_checksum "$LIBJPEG_CHK ./$LIBJPEG_SRC"
    wget http://zlib.net/$ZLIB_SRC
    run_checksum "$ZLIB_CHK ./$ZLIB_SRC"
    wget http://github.com/glennrp/libpng-releases/raw/master/$LIBPNG_SRC
    run_checksum "$LIBPNG_CHK ./$LIBPNG_SRC"
    wget http://downloads.sourceforge.net/project/expat/expat/2.1.0/$LIBEXPAT_SRC
    run_checksum "$LIBEXPAT_CHK ./$LIBEXPAT_SRC"

    do_libjpeg
    do_zlib
    do_libpng
    do_expat

    popd
}

function do_init {
    mkdir -p build
    rm -rf build/*
    pushd build

    PATH=$PATH:$SDK_PATH/tools
    PATH=$PATH:$SDK_PATH/platform-tools

    android create lib-project --name $PROJECT_NAME --target $TARGET_PLATFORM --path ./ --package $PROJECT_NAMESPACE

    rmdir src
    ln -s ../src_jar ./src
    ln -s ../src_jni ./jni

    cat <<EOF > Makefile
# Autogenerated Makefile

PATH := \$(PATH):$SDK_PATH/tools
PATH := \$(PATH):$SDK_PATH/platform-tools

clean:
	rm -rf bin/*
	rm -rf obj/*
	rm -rf libs/arm*

ndkbuild:
	$NDK_PATH/ndk-build TARGET_PLATFORM=$NDK_PLATFORM

release: ndkbuild
	ant release

debug: ndkbuild
	ant debug

EOF

    popd

    cat <<EOF > Makefile
# Autogenerated Makefile

BUILDDIR = build

help:
	@echo "Usage:"
	@echo
	@echo "make <target>"
	@echo
	@echo "Available targets:"
	@echo
	@echo "    help    : this text"
	@echo "    release : make a release build"
	@echo "    debug   : make a debug build"
	@echo "    clean   : cleanup build"

clean:
	cd \$(BUILDDIR); \$(MAKE) clean
	rm -rf export

releasebuild:
	cd \$(BUILDDIR); \$(MAKE) release
	@touch \$(BUILDDIR)/bin/classes.jar

debugbuild:
	cd \$(BUILDDIR); \$(MAKE) debug
	@touch \$(BUILDDIR)/bin/classes.jar

export: \$(BUILDDIR)/bin/classes.jar
	@printf "\\n\\nExporting to ./export\\n\\n"
	@mkdir -p export
	@rm -rf export/*
	@cp \$(BUILDDIR)/bin/classes.jar export/$PROJECT_NAME.jar
	@find \$(BUILDDIR)/libs/ | grep \.so | cut -d / -f 3- | awk '{print "install -D \$(BUILDDIR)/libs/" \$\$0 " export/" \$\$0}' | bash

release: releasebuild export
	@echo "releasebuild FINISHED"

debug: debugbuild export
	@echo "debugbuild FINISHED"

EOF
}

if [ "$1" = "-h" ]; then
    echo "Help:"
    usage
    exit 0
fi

if [ "$1" = "--help" ]; then
    echo "Help:"
    usage
    exit 0
fi

if [ "$#" -lt 6 ]; then
    echo "Wrong number of arguments"
    usage
    exit 1
fi

if [ "$1" != "--ndk-path" ]; then
    echo "Wrong first argument."
    usage
    exit 1
fi

if [ "$3" != "--sdk-path" ]; then
    echo "Wrong third argument."
    usage
    exit 1
fi

if [ "$5" != "--target-platform" ]; then
    echo "Wrong fifth argument."
    usage
    exit 1
fi

NDK_PATH=$2
SDK_PATH=$4
TARGET_PLATFORM=$6

NDK_PLATFORM=$(findsmallest $TARGET_PLATFORM)
echo "Found nearest compatible NDK platform $NDK_PLATFORM (requested: $TARGET_PLATFORM)"

if [ "$#" -eq 7 ]; then
    if [ "$7" != "--bootstrap" ]; then
	echo "Wrong seventh argument."
	usage
	exit 1
    fi

    do_bootstrap
else
    prepare_toolchain
fi

do_init

echo
